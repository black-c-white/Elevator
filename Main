
import java.util.ArrayList;
import java.util.Scanner;

public class main {
	
	static int up=0,down=0;  //记录list中电梯上楼及下楼的楼层总数
	static int now=1,state=1,goal;  //现在的楼层、电梯运行的状态（上1/下0）、目标楼层
	
	public static void main(String[] args) {
		
    //电梯运行的顺序
		ArrayList<Integer> list = new ArrayList<Integer>();
		
    /****
    *
    *线程一
    *插入输入的电梯楼层进入list中
    *
    ****/
    
		new Thread() {
			
			private Scanner sc = new Scanner(System.in);

			public void run() {
				System.out.println("请输入要去的楼层（1~20）");
				while(true) {
					if (sc.hasNextInt()) {
						sc = new Scanner(System.in);
					}
					goal = sc.nextInt();
          
					if(list.indexOf(goal)==-1) {  //输入的楼层数是否已存在
						if(list.isEmpty()) {  //如果list是空的
							list.add(goal);
              //改变电梯的状态描述及上下楼总数
							if (goal>now) {   
								state = 1;
								up++;
							}else if (goal<now) {
								state = 0;
								down++;
							}
						}else if(goal>now) {  //list不为空，且目标楼层比所在楼层高
							switch(state) {
							case 0:
								if(up==0) {
									list.add(goal);
									up++;
								}else {
									for(int i=down;i<=down+up;i++) {
										if(i==up+down) {
											list.add(goal);
											up++;
										} else if(goal<list.get(i)) {
											list.add(i,goal);
											up++;
											break;
										}
									}
								}
								break;
							case 1:
								if(up==0) {
									list.add(0,goal);
									up++;
								}else {
									for(int i=0;i<=up;i++) {
										if(i==up) {
											list.add(i, goal);
											up++;
										} else if(goal<list.get(i)) {
											list.add(i,goal);
											up++;
											break;
										}
									}
								}
								break;
							default:
								break;
							}
						}else {  //list不为空，且目标楼层比所在楼层高
							switch(state) {
							case 1:
								if(down==0) {
									list.add(goal);
									down++;
								}else {
									for(int i=up;i<=down+up;i++) {
										if(i==up+down) {
											list.add(goal);
											down++;
										} else if(goal<list.get(i)) {
											list.add(i,goal);
											down++;
											break;
										}
									}
								}
								break;
							case 0:
								if(down==0) {
									list.add(0,goal);
									down++;
								}else {
									for(int i=0;i<=down;i++) {
										if(i==down) {
											list.add(i,goal);
											down++;
										} else if(goal<list.get(i)) {
											list.add(i,goal);
											down++;
											break;
										}
									}
								}
								break;
							default:
								break;
							}
						}
					}
				}
			}
		}.start();
		
    /****
    *
    *线程二
    *电梯运行，每5秒运动一次
    *
    ****/
    
		new Thread() {
			public void run() {
				try {
					while (true) {
						
						if (!list.isEmpty()) {
							if (list.get(0) == now) {
								switch (state) {
								case 0:
									down--;
									break;
								case 1:
									up--;
									break;
								default:
									break;
								}
								list.remove(0);
								System.out.println("到达目标楼层：" + now);
							} else if (list.get(0) > now) {
								state = 1;
								now++;
							} else if (list.get(0) < now) {
								state = 0;
								now--;
							}
							System.out.println("到达楼层：" + now);
							Thread.sleep(5000);
						}
					}
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
			}
		}.start();
	}
	
}
