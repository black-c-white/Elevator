
import java.util.ArrayList;
import java.util.Scanner;

public class main {

	static volatile int up=0,down=0;  //队列中电梯的上升楼层的总数数和下降楼层的总数
	static volatile int now=1,state=1,goal;  //当前楼层、电梯运行状态（0为下降，1为上升）、输入的目标楼层数
	
	public static void main(String[] args) {

		
		ArrayList list = new ArrayList();  //电梯运行队列
		
		System.out.println("请输入要去的楼层（1~20）");
		
		Scanner sc = new Scanner(System.in);

		/***
		*
		*开启一个线程
		*电梯移动的线程
		*
		***/
		new Thread(new Runnable() {
				public void run() {
					try {
						while (true) {
							
							if (!list.isEmpty()) {
								if ((int)list.get(0) == now) {
									switch (state) {
									case 0:
										down= down-1;
										break;
									case 1:
										up= up-1;
										break;
									default:
										break;
									}
									list.remove(0);
									System.out.println("到达目标楼层：" + now);
								} else if ((int)list.get(0) > now) {
									state = 1;
									now++;
									System.out.println("楼层：" + now);
								} else if ((int)list.get(0) < now) {
									state = 0;
									now= now-1;
									System.out.println("楼层：" + now);
								}
								
							} else {
								//break;
							}
							Thread.sleep(100);
						}
					} catch (InterruptedException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
				
			}).start();
		
		/***
		*
		*不断输入楼层数并加入到队列中
		*
		***/
		while (sc.hasNext()) {
			goal = sc.nextInt();
			if (list.indexOf(goal) == -1) { //当输入的楼层数在队列中不存在
				if (list.isEmpty()) {  //如果队列为空
					list.add(goal);
					if (goal > now) {
						state = 1;
						up = up + 1;
					} else if (goal < now) {
						state = 0;
						down = down + 1;
					}
				} else if (goal > now) {  //队列不为空，且输入楼层数比当前所处楼层数高
					switch (state) { 
					case 0:  //目标楼层比当前楼层高且电梯下降中
						if (up == 0) {  //上升楼层数为空，直接插入到队列末端
							list.add(goal);
							up = up + 1;
						} else {  //电梯插入到队列后半部分
							for (int i = down; i <= down + up; i++) {
								if (i == up + down) {
									list.add(goal);
									up = up + 1;
								} else if (goal < (int) list.get(i)) {
									list.add(i, goal);
									up = up + 1;
									break;
								}
							}
						}
						break;
					case 1:  //目标楼层比当前楼层高且电梯上升中
						if (up == 0) {
							list.add(0, goal);
							up = up + 1;
						} else {  //电梯插入到队列前半部分
							for (int i = 0; i <= up; i++) {
								if (i == up) {
									list.add(i, goal);
									up = up + 1;
									i++;
								} else if (goal < (int) list.get(i)) {
									list.add(i, goal);
									up = up + 1;
									break;
								}
							}
						}
						break;
					default:
						break;
					}
				} else {  //队列不为空，且输入楼层数比当前所处楼层数低
					switch (state) {
					case 1:  //目标楼层比当前楼层低且电梯上升中
						if (down == 0) {
							list.add(goal);
							down = down + 1;
						} else { //目标楼层插入到队列后半部分
							for (int i = up; i <= down + up; i++) {
								if (i == up + down) {
									list.add(goal);
									down = down + 1;
								} else if (goal < (int) list.get(i)) {
									list.add(i, goal);
									down = down + 1;
									break;
								}
							}
						}
						break;
					case 0:  //目标楼层比当前楼层低且电梯下降中
						if (down == 0) {
							list.add(0, goal);
							down = down + 1;
						} else {  //目标楼层插入到队列前半部分
							for (int i = 0; i <= down; i++) {
								if (i == down) {
									list.add(i, goal);
									down = down + 1;
								} else if (goal > (int) list.get(i)) {
									list.add(i, goal);
									down = down + 1;
									break;
								}
							}
						}
						break;
					default:
						break;
					}
				}
			} 
		}
	}
}
